import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
import gradio as gr

# Load dataset
df = pd.read_csv('student-mat.csv', sep=';')

# Check and preprocess
df_encoded = pd.get_dummies(df, drop_first=True)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(df_encoded.drop('G3', axis=1))
y = df_encoded['G3']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train model
model = LinearRegression()
model.fit(X_train, y_train)

# Evaluate
y_pred = model.predict(X_test)
print("MSE:", mean_squared_error(y_test, y_pred))
print("R2 Score:", r2_score(y_test, y_pred))

# Gradio prediction function
def predict_grade(school, sex, age, address, famsize, Pstatus, Medu, Fedu, Mjob, Fjob, reason, guardian,
                  traveltime, studytime, failures, schoolsup, famsup, paid, activities, nursery, higher,
                  internet, romantic, famrel, freetime, goout, Dalc, Walc, health, absences, G1, G2):
    
    input_data = {
        'school': school,
        'sex': sex,
        'age': int(age),
        'address': address,
        'famsize': famsize,
        'Pstatus': Pstatus,
        'Medu': int(Medu),
        'Fedu': int(Fedu),
        'Mjob': Mjob,
        'Fjob': Fjob,
        'reason': reason,
        'guardian': guardian,
        'traveltime': int(traveltime),
        'studytime': int(studytime),
        'failures': int(failures),
        'schoolsup': schoolsup,
        'famsup': famsup,
        'paid': paid,
        'activities': activities,
        'nursery': nursery,
        'higher': higher,
        'internet': internet,
        'romantic': romantic,
        'famrel': int(famrel),
        'freetime': int(freetime),
        'goout': int(goout),
        'Dalc': int(Dalc),
        'Walc': int(Walc),
        'health': int(health),
        'absences': int(absences),
        'G1': int(G1),
        'G2': int(G2)
    }

    input_df = pd.DataFrame([input_data])
    combined = pd.concat([df.drop('G3', axis=1), input_df], ignore_index=True)
    encoded = pd.get_dummies(combined, drop_first=True)
    encoded = encoded.reindex(columns=df_encoded.drop('G3', axis=1).columns, fill_value=0)
    scaled_input = scaler.transform(encoded.tail(1))
    prediction = model.predict(scaled_input)
    return round(prediction[0], 2)

# Gradio interface
inputs = [
    gr.Dropdown(['GP', 'MS'], label="School"),
    gr.Dropdown(['M', 'F'], label="Sex"),
    gr.Number(label="Age"),
    gr.Dropdown(['U', 'R'], label="Address"),
    gr.Dropdown(['LE3', 'GT3'], label="Family Size"),
    gr.Dropdown(['A', 'T'], label="Parent Status"),
    gr.Number(label="Mother's Education (0-4)"),
    gr.Number(label="Father's Education (0-4)"),
    gr.Dropdown(['teacher', 'health', 'services', 'at_home', 'other'], label="Mother's Job"),
    gr.Dropdown(['teacher', 'health', 'services', 'at_home', 'other'], label="Father's Job"),
    gr.Dropdown(['home', 'reputation', 'course', 'other'], label="Reason"),
    gr.Dropdown(['mother', 'father', 'other'], label="Guardian"),
    gr.Number(label="Travel Time (1-4)"),
    gr.Number(label="Study Time (1-4)"),
    gr.Number(label="Failures (0-3)"),
    gr.Dropdown(['yes', 'no'], label="School Support"),
    gr.Dropdown(['yes', 'no'], label="Family Support"),
    gr.Dropdown(['yes', 'no'], label="Paid Classes"),
    gr.Dropdown(['yes', 'no'], label="Activities"),
    gr.Dropdown(['yes', 'no'], label="Nursery"),
    gr.Dropdown(['yes', 'no'], label="Higher Education"),
    gr.Dropdown(['yes', 'no'], label="Internet"),
    gr.Dropdown(['yes', 'no'], label="Romantic"),
    gr.Number(label="Family Relationship (1-5)"),
    gr.Number(label="Free Time (1-5)"),
    gr.Number(label="Going Out (1-5)"),
    gr.Number(label="Workday Alcohol (1-5)"),
    gr.Number(label="Weekend Alcohol (1-5)"),
    gr.Number(label="Health (1-5)"),
    gr.Number(label="Absences"),
    gr.Number(label="G1 (0-20)"),
    gr.Number(label="G2 (0-20)")
]

gr.Interface(fn=predict_grade, inputs=inputs, outputs="number", title="Student Final Grade Predictor").launch()